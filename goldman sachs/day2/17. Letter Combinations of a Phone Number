class Solution {
    public List<String> letterCombinations(String digits) {
         List<String> ans = new ArrayList<>();
        HashMap<Integer, char[]> mp = new HashMap<>();
        mp.put(2, new char[]{'a', 'b', 'c'});
        mp.put(3, new char[]{'d', 'e', 'f'});
        mp.put(4, new char[]{'g', 'h', 'i'});
        mp.put(5, new char[]{'j', 'k', 'l'});
        mp.put(6, new char[]{'m', 'n', 'o'});
        mp.put(7, new char[]{'p', 'q', 'r', 's'});
        mp.put(8, new char[]{'t', 'u', 'v'});
        mp.put(9, new char[]{'w', 'x', 'y', 'z'});

        if (!digits.isEmpty()) {
            word(digits, mp, "", ans);
        }

        return ans;

    }
    void word(String digits, HashMap<Integer, char[]> mp, String current, List<String> ans) {
        if(digits.isEmpty()) {
            ans.add(current);
            return;
        }
        int digit = digits.charAt(0) - '0';
        char[] letters = mp.get(digit);
        for(char letter:letters){
            word(digits.substring(1), mp, current + letter, ans);


        }


    }
}